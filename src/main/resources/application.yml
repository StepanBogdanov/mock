server.port: 8084

spring:
  application:
    name: mock
  cloud:
    function:
      definition: readRequest
    stream:
      source: registerUser;handleRequest;deleteUser
      kafka:
        binder:
          brokers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}
          consumer-properties:
            value.deserializer: com.example.mock.util.RequestDtoDeserializer
          producer-properties:
            value.serializer: com.example.mock.util.ResponseDtoSerializer
      bindings:
        readRequest-in-0:
          destination: requestTopic
          consumer:
            use-native-decoding: true
        registerUser-out-0:
          destination: responseTopic
          producer:
            use-native-encoding: true
        handleRequest-out-0:
          destination: responseTopic
          producer:
            use-native-encoding: true
        deleteUser-out-0:
          destination: responseTopic
          producer:
            use-native-encoding: true

logging:
  level.root: INFO
  file.name: logs/mock.log

management:
  endpoints.web.exposure.include: health, prometheus
  endpoint.health.show.details: always
  tracing.sampling.probability: 1

